version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: web3-semantics-postgres
    environment:
      POSTGRES_DB: web3_semantics
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - web3-semantics-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: web3-semantics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - web3-semantics-network

  # Elasticsearch搜索引擎
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: web3-semantics-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - web3-semantics-network

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.8
    container_name: web3-semantics-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    networks:
      - web3-semantics-network

  # Web3语义API服务
  api:
    build:
      context: ./backend/web3-semantics-api
      dockerfile: Dockerfile
    container_name: web3-semantics-api
    environment:
      - DATABASE_URL=postgres://admin:password@postgres:5432/web3_semantics
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - NEO4J_URL=bolt://neo4j:7687
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - neo4j
    networks:
      - web3-semantics-network

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web3-semantics-frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - web3-semantics-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: web3-semantics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - web3-semantics-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  neo4j_data:

networks:
  web3-semantics-network:
    driver: bridge 